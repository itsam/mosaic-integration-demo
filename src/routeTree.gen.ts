/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthedImport } from './routes/_authed'
import { Route as AuthedIndexImport } from './routes/_authed/index'
import { Route as AuthedTokenDetailsImport } from './routes/_authed/token-details'
import { Route as AuthedGatewayImport } from './routes/_authed/gateway'

// Create Virtual Routes

const AuthedAboutLazyImport = createFileRoute('/_authed/about')()

// Create/Update Routes

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const AuthedIndexRoute = AuthedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedAboutLazyRoute = AuthedAboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => AuthedRoute,
} as any).lazy(() => import('./routes/_authed/about.lazy').then((d) => d.Route))

const AuthedTokenDetailsRoute = AuthedTokenDetailsImport.update({
  id: '/token-details',
  path: '/token-details',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedGatewayRoute = AuthedGatewayImport.update({
  id: '/gateway',
  path: '/gateway',
  getParentRoute: () => AuthedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/_authed/gateway': {
      id: '/_authed/gateway'
      path: '/gateway'
      fullPath: '/gateway'
      preLoaderRoute: typeof AuthedGatewayImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/token-details': {
      id: '/_authed/token-details'
      path: '/token-details'
      fullPath: '/token-details'
      preLoaderRoute: typeof AuthedTokenDetailsImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/about': {
      id: '/_authed/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AuthedAboutLazyImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/': {
      id: '/_authed/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthedIndexImport
      parentRoute: typeof AuthedImport
    }
  }
}

// Create and export the route tree

interface AuthedRouteChildren {
  AuthedGatewayRoute: typeof AuthedGatewayRoute
  AuthedTokenDetailsRoute: typeof AuthedTokenDetailsRoute
  AuthedAboutLazyRoute: typeof AuthedAboutLazyRoute
  AuthedIndexRoute: typeof AuthedIndexRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedGatewayRoute: AuthedGatewayRoute,
  AuthedTokenDetailsRoute: AuthedTokenDetailsRoute,
  AuthedAboutLazyRoute: AuthedAboutLazyRoute,
  AuthedIndexRoute: AuthedIndexRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthedRouteWithChildren
  '/gateway': typeof AuthedGatewayRoute
  '/token-details': typeof AuthedTokenDetailsRoute
  '/about': typeof AuthedAboutLazyRoute
  '/': typeof AuthedIndexRoute
}

export interface FileRoutesByTo {
  '/gateway': typeof AuthedGatewayRoute
  '/token-details': typeof AuthedTokenDetailsRoute
  '/about': typeof AuthedAboutLazyRoute
  '/': typeof AuthedIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/_authed/gateway': typeof AuthedGatewayRoute
  '/_authed/token-details': typeof AuthedTokenDetailsRoute
  '/_authed/about': typeof AuthedAboutLazyRoute
  '/_authed/': typeof AuthedIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/gateway' | '/token-details' | '/about' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/gateway' | '/token-details' | '/about' | '/'
  id:
    | '__root__'
    | '/_authed'
    | '/_authed/gateway'
    | '/_authed/token-details'
    | '/_authed/about'
    | '/_authed/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthedRoute: typeof AuthedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AuthedRoute: AuthedRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authed"
      ]
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/gateway",
        "/_authed/token-details",
        "/_authed/about",
        "/_authed/"
      ]
    },
    "/_authed/gateway": {
      "filePath": "_authed/gateway.tsx",
      "parent": "/_authed"
    },
    "/_authed/token-details": {
      "filePath": "_authed/token-details.tsx",
      "parent": "/_authed"
    },
    "/_authed/about": {
      "filePath": "_authed/about.lazy.tsx",
      "parent": "/_authed"
    },
    "/_authed/": {
      "filePath": "_authed/index.tsx",
      "parent": "/_authed"
    }
  }
}
ROUTE_MANIFEST_END */
